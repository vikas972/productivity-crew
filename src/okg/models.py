"""Core data models for the productivity crew application."""

from datetime import datetime
from typing import List, Optional

from pydantic import BaseModel, Field, EmailStr, ConfigDict


class Person(BaseModel):
    """Represents a team member with role and hierarchy information."""

    model_config = ConfigDict(extra="forbid")

    person_id: str = Field(pattern=r"^PER-\d{4}$")
    name: str
    role: str = Field(pattern=r"^(Software Engineer|Team Lead|Engineering Manager)$")
    level: str = Field(pattern=r"^(Jr|Sr|TL|Mgr)$")
    team_id: str = Field(pattern=r"^TEAM-[A-Z]+$")
    manager_id: Optional[str] = Field(None, pattern=r"^PER-\d{4}$")
    skills: List[str]
    location: str


class StatusTransition(BaseModel):
    """Represents a status change in a ticket timeline."""

    model_config = ConfigDict(extra="forbid")

    status: str = Field(
        pattern=r"^(Backlog|To Do|In Progress|Code Review|Testing|Done)$"
    )
    at: datetime


class Comment(BaseModel):
    """Represents a comment on a ticket."""

    model_config = ConfigDict(extra="forbid")

    author_id: str = Field(pattern=r"^PER-\d{4}$")
    at: datetime
    body: str


class Attachment(BaseModel):
    """Represents an attachment to a ticket or email."""

    model_config = ConfigDict(extra="forbid")

    name: str
    url: str


class Ticket(BaseModel):
    """Represents a Jira ticket with full lifecycle information."""

    model_config = ConfigDict(extra="forbid")

    ticket_id: str = Field(pattern=r"^[A-Z]+-\d+$")
    project_id: str = Field(pattern=r"^PROJ-[A-Z]+$")
    epic_id: Optional[str] = Field(None, pattern=r"^EPIC-[A-Z]+-\d+$")
    type: str = Field(pattern=r"^(Story|Bug|Task|Spike)$")
    title: str
    description: str
    priority: str = Field(pattern=r"^(Low|Medium|High|Critical)$")
    story_points: Optional[int] = Field(None, ge=1, le=21)
    reporter_id: str = Field(pattern=r"^PER-\d{4}$")
    assignee_id: str = Field(pattern=r"^PER-\d{4}$")
    status_timeline: List[StatusTransition]
    comments: List[Comment]
    attachments: List[Attachment]


class MailRefs(BaseModel):
    """References to other entities in an email."""

    model_config = ConfigDict(extra="forbid")

    ticket_ids: List[str] = Field(default_factory=list)
    pr_ids: List[str] = Field(default_factory=list)
    doc_ids: List[str] = Field(default_factory=list)


class MailMessage(BaseModel):
    """Represents an email message with metadata and references."""

    model_config = ConfigDict(extra="forbid")

    msg_id: str = Field(pattern=r"^MSG-\d{3}$")
    thread_id: str = Field(pattern=r"^MAIL-TH-\d{3}$")
    subject: str
    from_: EmailStr = Field(alias="from")
    to: List[EmailStr]
    cc: List[EmailStr] = Field(default_factory=list)
    timestamp: datetime
    body_md: str
    attachments: List[str] = Field(default_factory=list)
    category: str = Field(
        pattern=r"^(work|managerial|customer|corporate|hr|vendor|security|event|facilities|spam|phishing_sim)$"
    )
    list_ids: List[str] = Field(default_factory=list)
    is_broadcast: bool = False
    is_external: bool = False
    importance: str = Field(default="normal", pattern=r"^(low|normal|high)$")
    spam_score: float = Field(default=0.0, ge=0.0, le=1.0)
    refs: MailRefs = Field(default_factory=MailRefs)


class Team(BaseModel):
    """Represents a team structure with members and hierarchy."""

    model_config = ConfigDict(extra="forbid")

    team_id: str = Field(pattern=r"^TEAM-[A-Z]+$")
    name: str
    members: List[Person]
    manager_id: str = Field(pattern=r"^PER-\d{4}$")


class Project(BaseModel):
    """Represents a project with key and metadata."""

    model_config = ConfigDict(extra="forbid")

    project_id: str = Field(pattern=r"^PROJ-[A-Z]+$")
    key: str = Field(pattern=r"^[A-Z]+$")
    name: str
    description: str


class Epic(BaseModel):
    """Represents an epic within a project."""

    model_config = ConfigDict(extra="forbid")

    epic_id: str = Field(pattern=r"^EPIC-[A-Z]+-\d+$")
    project_id: str = Field(pattern=r"^PROJ-[A-Z]+$")
    title: str
    description: str
    owner_id: str = Field(pattern=r"^PER-\d{4}$")


class Sprint(BaseModel):
    """Represents a sprint with time boundaries."""

    model_config = ConfigDict(extra="forbid")

    sprint_id: str = Field(pattern=r"^SPRINT-\d+$")
    name: str
    start_date: datetime
    end_date: datetime
    project_id: str = Field(pattern=r"^PROJ-[A-Z]+$")


class CompanyContext(BaseModel):
    """Company context generated by industry selector."""

    model_config = ConfigDict(extra="forbid")

    industry: str
    name: str
    mission: str
    tone: str
    values: List[str]
    products: List[str] = Field(default_factory=list)
    constraints: List[str] = Field(default_factory=list)


class CalendarTemplate(BaseModel):
    """Templates for recurring meetings and events."""

    model_config = ConfigDict(extra="forbid")

    event_type: str
    frequency: str
    time: str
    duration_minutes: int
    attendees: List[str] = Field(default_factory=list)


class IntegrityReport(BaseModel):
    """QA audit results."""

    model_config = ConfigDict(extra="forbid")

    passed: bool
    errors: List[str] = Field(default_factory=list)
    warnings: List[str] = Field(default_factory=list)
    ticket_count: int
    email_count: int
    person_count: int
